OTPWithLDAPAuthenticatorEditor.defaultName=otp-ldap
OTPWithLDAPAuthenticatorEditor.secretAttribute=Secret URI attribute name:

OTPWithLDAPAuthenticatorEditor.allowedTimeDrift=Allowed time drift (in steps):
OTPWithLDAPAuthenticatorEditor.timeStep=Time step (s):
OTPWithLDAPAuthenticatorEditor.hashAlgorithm=Hash algorithm:
OTPWithLDAPAuthenticatorEditor.hashAlgorithm.SHA1=SHA1
OTPWithLDAPAuthenticatorEditor.hashAlgorithm.SHA256=SHA256
OTPWithLDAPAuthenticatorEditor.hashAlgorithm.SHA512=SHA512

OTPWithLDAPAuthenticatorEditor.ldap=LDAP general
OTPWithLDAPAuthenticatorEditor.userDNResolving=LDAP user DN resolving
OTPWithLDAPAuthenticatorEditor.serverConnectionConfiguration=LDAP connection 
OTPWithLDAPAuthenticatorEditor.otp=OTP
OTPWithLDAPAuthenticatorEditor.displayedName=Displayed name:


OTPWithLDAPAuthenticatorEditor.codeLength.tip=How long code will be generated. Longer value is safer, \
but user has to type more. Google and Microsoft authenticator apps only support 6 digits. Used only if URI stored in LDAP doesn\u2019t define this parameter.
OTPWithLDAPAuthenticatorEditor.hashAlgorithm.tip=Hash algorithm to be used. SHA1 is the most commonly supported, \
other variants are more secure. Google and Microsoft authenticator apps only support SHA1. Used only if URI stored in LDAP doesn\u2019t define this parameter.
OTPWithLDAPAuthenticatorEditor.allowedTimeDrift.tip=If larger then zero, then codes generated in that many steps behind \
or after server''s time will be accepted.
OTPWithLDAPAuthenticatorEditor.timeStep.tip=How long each generated code is valid. 30 seconds is the safest bet. \
Google and Microsoft authenticator apps only support setting of 30s. Used only if URI stored in LDAP doesn\u2019t define this parameter.