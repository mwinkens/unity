RESTful Upman API
==========================
Unity Team <unity-idm-discuss@lists.sourceforge.net>
//Set to override automated version, which is the project version
//:revnumber: 9.9.9-FIXED
:numbered:
:toc: left
:linkcss:
:iconsdir: ./icons
:icons: font


The Unity Upman REST API may be exposed (or disabled) as a regular Unity endpoint. See the
<<manual.txt#endp-rest-upman,main Unity documentation>> for endpoints configuration details.

All paths must be naturally prefixed with the server's base URL, endpoint deployment's path
(as configured) and API version (currently there is only one). Example query path can be similar to:

   https://unity.example.com/rest-upman/v1/entity/1

== API reference


=== Create project

+@Path("/projects")+ +
+@POST+ +

Adds a new group with delegation under root group.
Property "groupName" can start with "/" or without.
If "registrationFormAutogenerate" is set to true, "registrationForm" should be null(if not will be ignored), because it will be auto generated.
If "signUpEnquiryAutogenerate" is set to true, "signUpEnquiry" should be null(if not will be ignored), because it will be auto generated.
If "membershipUpdateEnquiryAutogenerate" is set to true, "membershipUpdateEnquiry" should be null(if not will be ignored), because it will be auto generated.

Example input:
----
{
    "groupName": "/A",
    "isPublic": false,
    "displayedName": {
        "en": "displayedName"
    },
    "description": {
        "en": "description"
    },
    "enableDelegation": true,
    "logoUrl": "https://www.myservice.org/logo",
    "enableSubprojects": true,
    "readOnlyAttributes": [],
    "registrationFormAutogenerate": false,
    "registrationForm": "registrationFormName",
    "signUpEnquiryAutogenerate": false,
    "signUpEnquiry": "signUpEnquiryName",
    "membershipUpdateEnquiryAutogenerate": false,
    "membershipUpdateEnquiry": "membershipUpdateEnquiryName"
}
----


=== Update project

+@Path("/projects/{groupName}")+ +
+@PUT+ +

Updates the group with given group name under root group.
Parameter "groupName" can start with "/" or without.
If "registrationFormAutogenerate" is set to true, "registrationForm" should be null(if not will be ignored), because it will be auto generated.
If "signUpEnquiryAutogenerate" is set to true, "signUpEnquiry" should be null(if not will be ignored), because it will be auto generated.
If "membershipUpdateEnquiryAutogenerate" is set to true, "membershipUpdateEnquiry" should be null(if not will be ignored), because it will be auto generated.

Example input:
----
{
    "isPublic": false,
    "displayedName": {
        "en": "displayedName"
    },
    "description": {
        "en": "description"
    },
    "enableDelegation": true,
    "logoUrl": "https://www.myservice.org/logo",
    "enableSubprojects": true,
    "readOnlyAttributes": [],
    "registrationFormAutogenerate": false,
    "registrationForm": "registrationFormName",
    "signUpEnquiryAutogenerate": false,
    "signUpEnquiry": "signUpEnquiryName",
    "membershipUpdateEnquiryAutogenerate": false,
    "membershipUpdateEnquiry": "membershipUpdateEnquiryName"
}
----


=== Remove project

+@Path("/projects/{groupName}")+ +
+@DELETE+ +

Removes the group with given group name under root group.
Parameter "groupName" can start with "/" or without.


=== Get project

+@Path("/projects/{groupName}")+ +
+@GET+ +

Receives the group with given group name under root group.
Parameter "groupName" can start with "/" or without.

Example output:
----
{
    "groupName": "fullGroupName",
    "isPublic": false,
    "displayedName": {
        "en": "displayedName"
    },
    "description": {
        "en": "description"
    },
    "enableDelegation": true,
    "logoUrl": "https://www.myservice.org/logo",
    "enableSubprojects": true,
    "readOnlyAttributes": [],
    "registrationForm": "registrationFormName",
    "signUpEnquiry": "signUpEnquiryName",
    "membershipUpdateEnquiry": "membershipUpdateEnquiryName"
}
----


=== Get projects

+@Path("/projects")+ +
+@GET+ +

Receives all groups under root group.

Example output:
----
[
	{
	    "groupName": "fullGroupName",
	    "isPublic": false,
	    "displayedName": {
	        "en": "displayedName"
	    },
	    "description": {
	        "en": "description"
	    },
	    "enableDelegation": true,
	    "logoUrl": "https://www.myservice.org/logo",
	    "enableSubprojects": true,
	    "readOnlyAttributes": [],
	    "registrationForm": "registrationFormName",
	    "signUpEnquiry": "signUpEnquiryName",
	    "membershipUpdateEnquiry": "membershipUpdateEnquiryName"
	}
]
----


=== Add member

+@Path("/projects/{groupName}/members/{userId}")+ +
+@POST+ +

Adds a user with given id to given group.


=== Remove member

+@Path("/projects/{groupName}/members/{userId}")+ +
+@DELETE+ +

Removes a user with given id from given group.


=== Get member

+@Path("/projects/{groupName}/members/{userId}")+ +
+@GET+ +

Receives a membership of user with given id from given group.
Example output:
----
{
    "group": "fullGroupName",
    "entityId": 1,
    "creationTs": 1502713067.720000000,
    "translationProfile": "translationProfile",
    "remoteIdp": "remoteIdp"
}
----


=== Get members

+@Path("/projects/{groupName}/members")+ +
+@GET+ +

Receives memberships of users from given group.
Example output:
----
[
	{
	    "group": "fullGroupName",
	    "entityId": 1,
	    "creationTs": 1502713067.720000000,
	    "translationProfile": "translationProfile",
	    "remoteIdp": "remoteIdp"
	}
]
----


=== Get member authorization role

+@Path("/projects/{groupName}/members/{userId}/role")+ +
+@GET+ +

Receives a user membership authorization's role from given group.
Example output:
----
{
    "role": "role"
}
----


=== Set member authorization role

+@Path("/projects/{groupName}/members/{userId}/role")+ +
+@PUT+ +

Updates a user membership authorization's role from given group.
Property "role" can be one of ("manager", "projectsAdmin", "regular")
Example output:
To add:
----
{
    "role": "manager"
}
----