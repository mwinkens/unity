[[registration]]
== Registration forms

Unity allows its administrators to define and deploy so called _registration forms_. A registration
form can be used in four cases:

. To collect registration information from prospective users. This can be seen as a classic
registration feature use case. Such forms are called as 'public'.
. To quickly and conveniently create entities with common characteristics. In this case
administrator can define what data needs to be entered for the created user and also automate 
actions which should be performed for newly added users.
. To sign up users who authenticated with a remote IdP, but were not have been seen so far.
. To sign up invited users.   

After creation, a registration form can be tested and also filled (use case no 2 above) directly from 
the Admin Web UI. If the form is public it can be associated with any Web endpoint.
Then a link to register a new account will appear on the login screen of the endpoint. Additionally all public
forms get its own public address which can be used to directly launch a form. This address is constructed
from the form name and can be seen in the forms table (Signup & Enquiry -> Forms). 

Finally a form can be associated with a remote authenticator as a "handler" for unknown users who were 
correctly authenticated remotely. For this last case the form need not to be public. It is also
crucial to configure the input translation profile of the authenticator so it _does not_ create a local user 
automatically. Otherwise the configured form won't be ever launched, as the local user will be always present 
after translation profile execution. 

An example of registration form creation:

image::./figures/regFormMan.png[alt="Definition of registration form in Unity",align="center",scaledwidth="50%"]

A simple registration form in action:

image::./figures/regFormFill1.png[alt="Filling of a registration form in Unity",align="center",scaledwidth="50%"]

=== Defining a registration form

Unity can produce forms which are completed in a single stage (step) or in two stages. 
On the first stage it is possible to include external sign up options and (if needed) either a "local" sign-up button
or just a complete local sign-up form. This latter scenario is useful when the form is small or when there are no
remote sign-up options: then we have only the first stage.

The second stage shows a form which is contextual: it is used either to ask for additional data after remote sign-up 
(required information, which is not obtained from remote IdP) or all details in case on the first stage 
the "local sign-up" button was placed and used.


The form definition consists of multiple parts:

. General settings as name, notifications configuration and decision whether the form is publicly available.
. Collected information settings, which define what needs to be provided to create a final registration request. 
This information is usually collected interactively by filling a web form, but some data can be also collected from a
remote IdP or preset by an invitation. This is a complete definition of collected data, which depending on scenario is
collected in one or two stages as described above. 
. Form layout, which is by default generated automatically, but can be customized if order of elements, 
separators or section captions need to be adapted. 
. Finalization configuration: includes a list of rules which define handling of different final states after completing 
registration or running into different kinds of errors. See <<reg-finalization>> below.
. Form automation: rules which can be used to automatically pre-process the request data or process it (e.g. accept).
For instance this feature may be used to add all registered users to a specified group, accept all requests 
or even accept requests but only after their email address is confirmed.    

The most important are the settings of the 2nd point, i.e. the data collected about the user. Each
of the identities, group memberships and attributes can be collected in different modes. The modes are as follows:

User input:: A user interface component is displayed to collect the information from a user.
From remote IdP and shown RO:: The information must be provided by a remote IdP.
It is then shown to a user in the form, but can not be edited.
From remote IdP and hidden:: As above but the information is not shown on the form filling screen. 
From remote IdP else user input:: In this mode the user can fill the data 
only if it was not provided by a remote IdP. If it was provided by remote IdP then this data is hidden in the form.
From remote IdP and editable:: Same as User input, but if a remote IdP provided a value then it is used as a default.

Additionally all pieces of collected information can be made optional. The other types of collected information:
agreements and credentials can be only collected interactively, therefore there is no mode selection in their case. 

=== Processing a registration request

A submitted request is visible in AdminUI and can be accepted, denied or removed there. Depending on form's 
configuration notifications are sent upon form arrival and processing.

When a request is accepted all the settings which were requested are applied: a new entity is created with
specified identities, attributes and group memberships. Administrator can manually disable some of the attributes
and group membership individually.

What is more, and is a big advantage of Unity, is a possibility to automate requests processing in a very flexible way.
This automation is described in the subsequent section. 

=== Invitations

Unity offers invitations support. Invitations are bound to an existing registration form, which must be public
and must not possess a fixed (shared) registration code. Typically such forms are marked as 'by invitation only'
what ensures that only the invited users can fill the form (but this is not a requirement).

Invitations can be created in the AdminUI (Signup & Enquiry -> Invitations). What is very useful in
various integration scenarios, the invitations feature can be also fully controlled by the REST API of Unity,
see <<endp-rest-admin>> for details. 

Invitation fundamental element is the 'registration code', which is a unique, random identifier generated by Unity.
This code can be handled manually to the invited person, and then used at the beginning of the registration form filling.
Typically, however, invitation is sent by e-mail, with link including the code. To enable this feature, the invitation's
form must have the 'invitation template' defined, and the invitation itself the user's address specified.

NOTE: Forms which allows for both invited and not invited users, can not be accessed by providing an invitation
code manually. For such forms the code must be always provided in the form's public URL parameter.    

The fundamental invitation feature is the most useful for registration requests automatic acceptance: form which is
'by invitation only' can have auto acceptance rule included, as it is guaranteed that all requests were using a 
valid invitation. For the forms accepting also not invited users, it is possible to check if a (valid) invitation
code was provided in form automation rule's condition with the +validCode+ variable.

Additional, powerful feature is request pre-filling from an invitation. If some information about an invited user
is known when inviting (e.g. emial), this information can be associated with the invitation. Precisely speaking all
attributes, identities and group parameters of a form can be pre-filled. For each element is is possible to define
how the pre-filled value should be treated: whether the user should be able to change the pre-filled value, 
only see it or neither see nor change.

Finally invitation can contain custom parameters which can be used in invitation message template.

=== Parameterization of forms

Registration forms can have dynamic parameters, which are filled by invitations.

Parameters can be used in form displayed name (title) of both first and second stage, as well as in the form information text. Parameters need to be of the form ```${custom.NAME}```, where the ```NAME``` is the name of the variable. When creating an invitation to the form add a parameter value using the same name.

Pro tip: the texts where you can use variables are in fact Freemarker templates. You can use any directives that Freemarker allows in them, e.g. to conditionally output different text depending on variable presence.

=== Registration request processing automation

Each registration form can have a translation profile attached to it. The registration translation profile 
is built using the same approach as the input and output translation profiles: i.e. 
it consists of a list of rules, where each rule has a MVEL condition and an action taken when the condition is true.

Registration profile is executed primarily when the request is submitted. There are however some rules which are
consulted also in other corner cases (see below). Upon submission the the profile can perform couple of actions:

. it can remove some of the data requested/provided by the requester (e.g. remove an attribute assigned in a group
'/staff' if the user didn't request membership in this group). 
. it can add additional data (e.g. it can add an identity of email type with the same value as the email attribute
which was entered by the requester)
. it can configure initial settings of the entity
. finally it can (conditionally) automatically accept, deny or even drop the request.

 
MVEL expression context available in all conditions and value expressions contains the following elements. Note 
that many of the variables come in a variant prefixed with the +r+ letter. Those variants contain only the 
elements which were collected automatically, i.e. usually were provided the the registration form by a remote IdP.
 
. +(r)attr+ Map indexed with attribute names. Value of each entry is a single value of the attribute. If the attribute
is multi-valued then the first value is returned. If the attribute has no value then empty string is returned.
. +(r)attrs+ Map indexed with attribute names. Value of each entry is a list of the attribute values.
. +(r)idsByType+ Map of identity values indexed by type.   
. +(r)idsByTypeObj+ Map of identity objects indexed by type. This map is harder to use then +idsByType+ 
(which holds strings) but offers access to full information stored in identity as its confirmation state.
. +(r)groups+ List of selected groups. 
. +agrs+ List of agreements. Each agreement is boolean type.
. +triggered+ Tells how the registration was started. Available values are: +manualAtLogin+, 
+manualStandalone+, +manualAdmin+, +afterRemoteLogin+. 
. +onIdpEndpoint+ If is +true+ then the registration was invoked in the middle of authentication where
Unity is being used by some service as its remote IdP. Especially useful in case of redirect action. 
. +userLocale+ Contains the user's locale.
. +registrationForm+ Name of the registration form (so it can be set in some attribute)
. +requestId+ Id of the registration request (so it can be set in some attribute)
. +validCode+ +true+ if a valid registration code was provided, +false+ otherwise. Useful for checking if
a request came by invitation or not (for forms allowing both).


[[reg-finalization]]
==== Finalization and redirection

In the Finalization config or registration form one can define title, message, and redirection URL. 
In case when a more customized final screen is needed, redirection can happen automatically. The details of 
the status are added as parameters.

Note that older versions of Unity used a special actions in the form automation rules to control (in a limited way)
the behavior. Since version 2.7.0 this is not active feature anymore. The actions are still there so that 
re-configuration to the new Finalization configuration is easier. In future those actions will be completely dropped.

The automatically added query parameters are:

. +status+ one of +submitted+, +submittedAccepted+ (if auto accept condition triggered request acceptance), 
+submittedWithError+, +cancelled+, +elementConfirmed+, +elementConfirmationError+. 
The last two are used after confirming elements as email of the form.
. +error_code+ more detailed information about error in case of error status
. +form_id+ identifier of the form, may be missing in rare cases
. +request_id+ request identifier, may be missing in rare cases
. +confirmed_element_type+ one of +identity+ or +attribute+
. +confirmed_element_name+ 
. +confirmed_element_value+


==== Automatic processing

The rules which contain the +autoProcess+ action are used to automatically accept, deny or drop the request.
Such rules behave in the same way as all regular rules, with one exception. Namely, those rules are consulted
not only after the request is submitted, but also after each confirmation of request elements 
(such as email identity confirmation). Therefore it is possible to automatically accept a request only after 
its email identity is confirmed.  

The full MVEL documentation can be found here {mveldoc}


Example conditions:

Checks if request has an +email+ attribute set (useful if this attribute is collected as optional).
------
attrs["email"][0] != null
------

The same as above but the emial attribute must come from a remote IdP, i.e. must be collected by 
the form in an automatic mode.
------
rattrs["email"][0] != null
------

Checks if request contains identity of x500Name type.
------
idsByType["x500Name"] != null
------

Checks if request's first agreement was accepted. 
------
agrs[0] == true
------

Checks if the first email type identity is confirmed. 
------
idsByTypeObj["email"][0].confirmed == true
------


