[id="logging"]
=== Logging configuration

Unity uses the Log4j logging framework in version 2.x (note that the older version 1.x is much different).
Logging is configured in the +conf/log4j2.xml+ file. Other log file formats supported by Log4j may be alternatively 
used but we suggest to use the default XML format.

By default, log files are written to the the +logs/+ directory. 

The following example config file configures logging so that log files are 
rotated daily. The example contains inline explanations in comments.

[source,xml]
-------------------
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorInterval="30" status="warn">
  <!-- 
    What to log?
    Levels in order of verbosity: FATAL, ERROR, WARN, INFO, DEBUG, TRACE
  -->
  <Loggers>
    <!-- Default log level -->
    <Root level="INFO">
      <!-- Default appender specifies where to log by default 
           (can be changed per logger) -->
      <AppenderRef ref="LOGFILE"/>
    </Root>
  
    <!-- Everything produced by Unity (unless overwritten below) -->
    <Logger name="unity.server" level="DEBUG"/>

    <!-- Loading of any configuration -->
    <Logger name="unity.server.config" level="INFO"/>

    <!-- Persistence subsystem -->
    <Logger name="unity.server.db" level="INFO"/>

    <!-- Web subsystem -->
    <!-- <Logger name="unity.server.web" level="INFO"/> -->
  </Loggers>
  
  
  <!-- Where to log? -->
  <Appenders>
    <Console name="CONSOLE">
      <PatternLayout pattern="%d{ISO8601} [%t] %-5p %c: %equals{%1x}{[]}{}%m%n"/>
    </Console>
    
    <RollingRandomAccessFile name="LOGFILE" 
        fileName="/var/log/unity-idm/unity-server.log" 
        filePattern="/var/log/unity-idm/unity-server.log.%d{yyyy-MM-dd}">
        
      <PatternLayout pattern="%d{ISO8601} [%t] %-5p %c: %equals{%1x}{[]}{}%m%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
      </Policies>
      <DefaultRolloverStrategy/>
    </RollingRandomAccessFile>
  </Appenders>
</Configuration>
-------------------

[NOTE]
===========
In Log4j, the log rotation frequency is controlled by the DatePattern. Check 
https://logging.apache.org/log4j/2.x/manual/appenders.html
for the details, search for +filePattern+.
===========

For more info on controlling the logging we refer to the log4j documentation:
  
  - https://logging.apache.org/log4j/2.x/manual/index.html[Introduction]
  - https://logging.apache.org/log4j/2.x/manual/appenders.html[Where to log - appenders]
  - https://logging.apache.org/log4j/2.x/manual/layouts.html[Log entry format - layouts]
 

==== Logger categories, names and levels

Logger names are hierarchical. In Unity, prefixes are used to define category of log message (e.g. "unity.server.ldap")  
to which the Java class name is appended. Complete name of a logger is sometimes called as logging facility. 

The logging prefixes are:

- +unity.server+ - can be used to control default logging level of all Unity-produced logs. No logging facility is 
directly using this prefix though, there is always something after 'server' - see below.
- +unity.server.core+ - general server messages (not covered by any other facility below)
- +unity.server.config+ - configuration parsing and loading
- +unity.server.db+ - database related
- +unity.server.web+ - web interface related
- +unity.server.saml+ - SAML subsystem related
- +unity.server.ldap+ - upstream LDAP IdP related 
- +unity.server.ws+ - SOAP (web service) stack related
- +unity.server.externaltranslation+ - messages connected with the translation of any upstream IdP 
data to the Unity format.
- +unity.server.forms+ - Registration and enquiry related logs
- +unity.server.authn+ - Authentication and session management
- +unity.server.oauth+ - OAuth related
- +unity.server.pam+ - PAM related
- +unity.server.otp+ - One time passwords related
- +unity.server.fido+ - FIDO related
- +unity.server.rest+ - REST infrastructure 
- +unity.server.notification+ - User notifications subsystem 
- +unity.server.confirmation+ - Email and mobile confirmations
- +unity.server.upman+ - Unity projects management endpoint 
- +unity.server.audit+ - Audit logging
- +unity.server.script+ - Invocation of external scripts
- +unity.server.userimport+ - Import of user information from 3rd party DBs like LDAP
- +unity.server.bulkops+ - Bulk operations on Unity directory
- +unity.server.event+ - Low level events handling
 
Therefore the logging output produced can be controlled in a fine-grained manner. Log levels in Log4j are (in increasing level of severity): 

- +TRACE+ on this level _huge_ pieces of unprocessed information are dumped,
- +DEBUG+ admin-friendly, verbose information, useful for hunting problems, 
- +INFO+ standard information, not much output,
- +WARN+ warnings are logged when something went wrong (so it should be investigated), but recovery was possible,
- +ERROR+ something went wrong and operation probably failed, 
- +FATAL+ something went really wrong - this is used very rarely for critical situations like overall server failure.


[NOTE]
===========
The best way to discover what is the name of the interesting category is to turn on the general DEBUG logging 
for a while. Then interesting entries can be seen and subsequently the logging configuration can be fine tuned
to only show them.
===========

==== Diagnostic context (MDC)

Unity inject several pieces of context information. Those are commonly referred as Mapped Diagnostic Context and are
useful to trace processing flows consisting of many subsequent log entries. The following keys are available:

- +endpoint+ - name of the endpoint handling the request
- +user+ - displayed name of the user who initiated operation
- +entityId+ - numeric entity id of the user who initiated operation
- +clientIP+ - IP of the client who initiated operation
 
Note, that all of the MDC keys are not always present, i.e. may be absent when are not applicable. Example is 
a periodic operation invoked by server itself - its logs won't have diagnostic context.
 
Example configuration of console appender using all available MDC:
----
	<Appenders>
		<Console name="CONSOLE">
			<PatternLayout pattern="%d{ISO8601} [%t] [%X{endpoint}] [%X{user}] [%X{entityId}] [%X{clientIP}] %-5p %c:%equals{%1x}{[]}{} %m%n"/>
		</Console>
	</Appenders>
----
 
Log entry with the above configuration could look like this:
----
2021-03-24T12:53:05,988 [qtp1132974836-39] [RESTful administration API] [Default Administrator] [1] [0:0:0:0:0:0:0:1] DEBUG unity.server.rest.RESTAdmin: getEntity query for 1
----
