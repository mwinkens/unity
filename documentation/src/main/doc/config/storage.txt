[[db-conf]]
=== Storage configuration

Unity can use a configurable storage backend. Currently there are two options available, more may be added in future:

. Relational database backend (RDBMS) - a typical classic choice
. Hazelcast distributed in-memory data grid (HZ) - _currently experimental_, intended for instances with large traffic 
and a need for clustering 

Selection of the database backend and its subsequent configuration is provided in the main +unityServer.conf+ file.
The following option allows to select the database backend:

----
unityServer.storage.engine=rdbms  # 'hz' is another possible option 
----

Note that the Admin Console provides a possibility to create a dump JSON dump of the complete server state and to restore 
the system from such dump regardless of the selected storage engine.

 
==== RDBMS storage backend

Unity typically is deployed with a RDBMS backend. Several actual databases are supported: 
H2 (embedded, no setup required), MySQL or PostgreSQL. RDBMS service is stable, quite fast and offers an excellent
ecosystem of maintenance supporting tools (backups, redundancy, etc) which is available for the mature RDBMS technology.
It is however more difficult to create a HA or clustered Unity instance with RDBMS technology.

The following table enumerates all configuration options for the RDBMS backend. 

include::../ref-storeRDBMSProperties.txt[]

The remaining part provides more insight into specific setup of databases used by Unity. Note that if the simple 
embedded H2 database is used no special setup is required - it works out of the box. However is not recommended
for production use as handling backups and redundancy is very problematic with it.


===== MySQL setup

Unity can work with:

. MariaDB: for Unity version 2.0.0 -- 2.4.x, the minimum supported version of MariaDB is 10.2.1. 
Since the Unity release 2.5.0 version 5.3 version of MariaDB should be fine.
. Oracle's MySQL, the minimum supported version is 5.6.4. 

The setup of MySQL requires creation of a database with a separate user which is able to connect to the database.
In mysql console (when logged with admin privileges) execute following commands:
 
 CREATE DATABASE unitydb;
 CREATE USER 'unity'@'localhost' IDENTIFIED BY 'unitypass';
 GRANT ALTER, CREATE, DELETE, DROP, EXECUTE, INDEX, INSERT, LOCK TABLES, 
    SELECT, TRIGGER, UPDATE, REFERENCES ON unitydb.* to 'unity'@'localhost';

using the desired database name, username and password. If the database is on a different host then the Unity instance,
change to localhost to a proper host of Unity installation or use +%+ to allow connections from any host.  

Test if the connection works with:

 mysql -p -u unity unitydb

and give the password.

Unity server will setup all tables automatically on startup.

To configure Unity to use the database change the database JDBC URI as well as add the username, password and dialect:
 
----
unityServer.storage.engine=rdbms
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:mysql://localhost/unitydb
unityServer.storage.engine.rdbms.dialect=mysql
unityServer.storage.engine.rdbms.username=unity
unityServer.storage.engine.rdbms.password=unitypass
----

Note: For certain authentication types it may be necessary to provide server's public key or to use the 
+?allowPublicKeyRetrieval=true+ connection option (which however should never be used if the server 
is accessed through public network). Refer to MariadB driver's documentation for all available connection options
https://mariadb.com/kb/en/about-mariadb-connector-j/

===== PostgreSQL setup

The setup of PostgreSQL (Unity should be compatible with any recent version) 
requires creation of a database with a separate role (user) 
which is able to connect to the database. Typically on Linux system you have to invoke:

 createuser -P unity
 createdb -O unity unitydb
 
using the desired database name, username and password. Of course any other tool can be used to create the user and
database. Finally note that Postgres must allow for password authentication for the Unity user. Ensure that
in +pg_hba.conf+ you have a lines similar to those two:

 host   all         all         127.0.0.1/32          md5
 host   all         all         ::1/128               md5

If the database is on a different host then the Unity instance, change IP addresses to a proper ones.  

Test if the connection works with:

 psql -h localhost unitydb unity

and give the configured password.

Unity server will setup all tables automatically on startup.

To configure Unity to use the Postgres database change the default database JDBC URI as well as 
add the username, password and dialect:
 
----
unityServer.storage.engine=rdbms
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:postgresql://localhost/unitydb
unityServer.storage.engine.rdbms.dialect=psql
unityServer.storage.engine.rdbms.username=unity
unityServer.storage.engine.rdbms.password=unitypass
----


==== Hazelcast storage backend

Hazelcast storage engine (HZ) is in fact an overlay over RDBMS storage mechanism. HZ stores the whole Unity contents 
in memory. All read operations are exclusively served from memory (and so are fast), 
writes are also to memory (so are also fast) but additionally the same write operation is recorded to a classic RDBMS 
backend. As RDBMS writes are not blocking server operation (only the memory writes do) the overall performance 
is very high. RDBMS-stored data is read only once: during server startup.  

What is more the HZ engine allows for easy clustering of Unity instances. Hazelcast technology has built-in support
for clustering and can be used to achieve highly performing and HA instances.  


Minimal configuration of Hazelcast subsystem is as simple as:
----
unityServer.storage.engine=hz
unityServer.storage.engine.hz.jdbcUrl=jdbc:h2:file:./data/myUnityDatabase.bin
----

using H2 database as the persistent store. All other RDBMS can be used with HZ engine too, their configuration
is the same as for the RDBMS backend, with the exception of the configuration property prefix.

Note that RDBMS format is the same for HZ and RDBMS backend. This means that you can freely switch between 
those backends, without any need for data migration.

Complete reference to HZ engine config options follows:

include::../ref-storeHzProperties.txt[]

