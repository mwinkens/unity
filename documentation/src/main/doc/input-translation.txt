[[input-translation]]
=== Input translation

Translation profile is a named, ordered list of conditional rules. The rules are used to 
modify the information about a principal being processed by Unity. Input translation profile is used when 
a remote user was externally authenticated and its data is consumed by Unity.

For instance, an input translation profile can change remote attribute 'size' name to
'width' and insert a remotely authenticated user to the local database (to a desired group)
if the user is not yet there.

A profile consists of a list of rules. Each rule has a condition and an action.

Conditions are used to dynamically turn action execution on or off. Conditions (as well as some of the arguments 
of translation actions have) have to be specified as _MVEL expressions_. Such expressions allow for a powerful, 
dynamic functionality. 

The full MVEL documentation can be found here: {mveldoc}

The following example condition:
----
attr contains 'cn'
----
will trigger an action whenever the subject has an attribute +cn+. In the following sections there are 
additional examples and a complete reference of all variables which are available to write conditions. Nevertheless
the most popular condition is simply: +true+.

Actions are different for each type of the profile. The editor provides you with helpful interface to create them.


An input translation profile is always associated with a _remote authenticator in its configuration_.
It is a mandatory setting, all remote authenticators must have one profile associated.

Input translation profile (both conditions and rules) operate on a data structure which is initially
filled by the protocol specific component. The structure can contain:

. Identity (or identities) authenticated by the remote IdP.
. Attributes provided by the remote IdP.
. Groups assigned by the remote IdP.
 
What data is actually in this structure is dependent on the upstream protocol, upstream server and 
callout configuration.

Profile actions map remote data to Unity artifacts. For instance mapped result can be an attribute of type 'cn'
with some dynamic value. The value is completely controllable with a MVEL expression and can be anything from a 
simple direct reuse of remotely provided attribute to a sophisticatedly crafted string. It might be good to 
take a look at the example profile below.

Each profile should be started from a mandatory *identity mapping*. It is possible to control whether
the remote identity should be matched against the local one and/or automatically created. Note that the identity mapping
result decides how the general login process looks like: if a profile maps a user to an existing user (also by 
creating an new entity) login will proceed automatically. If the profile maps the remote user to some not existing 
identity then Unity can be configured to present a registration form or account association dialog. Finally if 
remote user is not mapped to any identity the login fails. 

There are several so called _identity mapping effects_ which are important for the remote user mapping process:

. +CREATE_OR_MATCH+ if the mapped identity doesn't exist it is automatically created. If it exists then the remote user
is mapped onto this entity what sets the context for all other profile actions.   
. +MATCH+ The remote user is mapped onto existing entity it it is found. Otherwise nothing happens. 
. +REQUIRE_MATCH+ The remote user is mapped onto existing entity it it is found. Otherwise authentication is failed.
. +UPDATE_OR_MATCH+ is the most tricky option, similar to +CREATE_OR_MATCH+. 
The remote user is mapped onto an existing one if it exists. Conversely if the resulting identity does not exist 
in the system, then it is created but only if additionally the remote user was already mapped onto existing entity 
by other rules of the profile. This complicated behavior is actually quite useful whenever we want to have new remote
identities propagated to the existing user in Unity, but at the same time we don't want to have a new user (entity) 
created automatically (what would be +CREATE_OR_MATCH+ effect), so that a registration facility can be used.      

Additionally the actions allow for creating Unity's attributes, assigning the remote user to groups and to change
entity status.  

One action requires a special attention: +removeStaleData+. This action, when added to a profile, causes Unity
to remove all stale data: attributes, group memberships, identities. The data is assumed to be stale if it 
was previously created by the same profile, basing on input from the same remote IdP 
and which was not reproduced during the current invocation of the profile.

==== Translation profile testing

Unity provides a sophisticated feature helping to work with input translation profile.
 
Testing can be performed on an existing remote authenticator with some profile configured. 
This feature is available from the Authentication -> Facilities main view (Test button). 
Test begins with a sandboxed authentication in a popup window, where one can select any of the remote 
authentication options available in the system. 
After authentication (failed or successful) a detailed information on the profile's 
application to the data provided by remote IdP (and naturally the data itself) is presented, 
including even a relevant server's internal log.   


==== Reference
MVEL context reference:

. +idp+ Name of the IdP which provided the data 
. +attr+ Map indexed with attribute names. Value of each entry is a single value of the attribute. If the attribute
is multi-valued then the first value is returned. If the attribute has no value then empty string is returned. 
. +attrs+ Map indexed with attribute names. Value of each entry is a list of the attribute values.
. +id+ Value of the authenticated identity. If remote IdP returned multiple identities, then a random one is available,
though this is a very exotic case. In rare cases (typically with SMAL IdPs) it may happen that IdP is not providing any 
unique identifier of the identity. In such case this variable is set to +null+, and user should be identified 
by some (combination of) attributes.
. +idType+ The type of the identity stored in the +id+ variable. +null+ only if +id+ is null.
. +idsByType+ Map of identity values indexed by type. Rarely useful.
. +groups+ List of all remote groups. 
 
Actions as +mapGroup+, +mapIdentity+ or +mapAttribute+ can be used with an expression returning either
a single value or a collection of values.

Example input profile:
------
1: Condition: true
Action: mapIdentity
Action parameters:
  unityIdentityType = userName
  expression = attr['urn:oid:2.5.4.3']
  credential requirement = Password requirement
  effect = CREATE_OR_MATCH

2: Condition: true
Action: mapAttribute
Action parameters:
  unityAttribute = cn
  group = /
  expression = attr['urn:oid:2.5.4.4']
  effect = CREATE_OR_UPDATE

3: Condition: groups contains 'student'
Action: mapGroup
Action parameters:
  expression = '/A/B'
------

The above profile in the first action maps the attribute +urn:oid:2.5.4.3+ value to Unity identity of +userName+ 
type. Such identity will be created if doesn't exist, otherwise all other actions will be performed against 
the existing local identity with such userName. Subsequently the remote attribute +urn:oid:2.5.4.4+ value 
will be mapped to Unity attribute +cn+ and the attribute will be assigned in the root group if it doesn't exist.
If it does, its value will be updated (upon each login). Finally the user will be added to the '/A/B' group
assuming it is in the +student+ group as reported by the remote IdP.

==== Example expressions

The most often used condition:
----
true
----

Condition disabling the action:
----
false
----

Condition testing if a principal is a member of the +students+ group (which is a group at the remote IdP):  
----
groups contains 'students'
----  

Condition testing if a principal has the +cn+ attribute:
----
attr contains 'cn'
----

When writing expressions in actions, usually we need a string value. For instance here is the first value
of the _cn_ attribute:
----
attr['cn']
----

All values (list) of the same attribute:
----
attrs['cn']
----
  
It is also possible to glue many values. Let's create a DN, which can be used to dynamically create an identity:
----
'CN=' + attr['cn'] + ',O=' + attr['o'] + ',C=NO'
----


MVEL provides convenient operations on list of values too. The following expression converts a list of
groups (as returned by remote IdP, e.g. LDAP) to unity groups. A constant prefix +/it/groups/+ is added and 
3 initial characters are removed from the external group name, but only of the group name has at least 4 characters.

----
('/it/groups'+$.substring(3) in groups if $.length() > 3)
----  


Finally the value of the identity provided by remote IdP is available as follows:
----
id
----

