[[ldap-authenticator]]
=== LDAP 

Credential verificator name:: +ldap+ and +ldap-cert+
Compatible credentials:: +password+ and +X.509 certificate+

LDAP based authentication allows for outsourcing credential verification to a server 
talking with the LDAP protocol, as OpenLDAP or Active Directory.

To configure LDAP authentication a server address must be provided as well as some information
regarding the LDAP directory schema. The amount of options varies depending on the amount of 
information that should be retrieved from LDAP. 

The typical authenticator's configuration will look as follows:

----
unityServer.core.authenticators.x.authenticatorName=ldapWeb
unityServer.core.authenticators.x.authenticatorType=ldap
unityServer.core.authenticators.x.configurationFile=conf/authenticators/ldap.properties
----

LDAP communication can be set up in several different ways:

. All operations are performed as the user who is authenticating itself. It is a default mode, the +userDNTemplate+
property needs to be defined to make it working: login username is used as a part of the DN template.
. In many cases the ordinary users are not authorized to perform all required LDAP searches. In such case the system
user identity must be set up using +ldap.systemDN+ and +ldap.systemPassword+ properties. 
Additionally Unity must be instructed to use it by setting +ldap.bindAs=system+. In this mode the only operation
performed with the user's identity is the bind operation used to check user's password.
. In some cases it may happen that username (as entered in the login process) is not a part of DN in the LDAP tree.
In such case the DN must be found first. To use this mode one has to set +ldap.userDNSearchKey=SOME_KEY+ property and define an 
extra search specification under the key +SOME_KEY+. To make it working also the system user credentials must be set up
as the initial search must be run as the system user, regardless of the further operations governed by the 
+ldap.bindAs+ setting.
. If LDAP attributes should not be anyhow imported/processed or can not be read due to authorization constraints 
then the +ldap.authenticateOnly=true+ option can be set.


Let's consider an (complex) example of a configuration of the LDAP verificator 
in file +conf/authenticators/ldap.properties+:

----
ldap.servers.1=localhost
ldap.ports.1=389
ldap.userDNTemplate=cn={USERNAME},ou=users,dc=unity-example,dc=com
ldap.attributes.1=cn
ldap.attributes.2=sn
ldap.groupsBaseName=dc=unity-example,dc=com
ldap.groups.1.objectClass=posixGroup
ldap.groups.1.memberAttribute=memberUid
ldap.groups.1.matchByMemberAttribute=cn
ldap.groups.1.nameAttribute=cn
ldap.groups.2.objectClass=groupOfNames
ldap.groups.2.memberAttribute=member
ldap.groups.2.nameAttribute=cn
----

In this example a single LDAP server is configured (also alternative addresses may be added 
to take advantage of LDAP high availability deployment if it is set up): localhost:389.
The login name which is presented for authentication is converted to an LDAP DN using a template 
expression. Thanks to it the user needs not to enter the full DN.
The two attributes (+cn+ and +sn+) are going to be retrieved for the user.
Finally there are two group definitions, configuring how to extract group membership from LDAP.
In this case the LDAP server stores groups as separate tree nodes which contains group 
members as values of a designated attribute. 

In the both cases the groups are searched under the LDAP tree node +dc=unity-example,dc=com+. In the first
case the group objects have the class +posixGroup+. Members are listed as values of the +memberUid+ attribute.
What is more the values are not the full DNs of the members but only their +cn+ attributes. The 
group's short name is in its +cn+ attribute. The 2nd group definition is similar but another 
object class is used (+groupOfNames+), members are in other attribute (+members+) and are given 
with their full DNs.

In some cases the above approach which retrieves group membership and user's attributes from LDAP is not enough.
It may happen that additional attributes, which should be assigned to the user inside Unity, are placed in 
other branches of the LDAP tree. To solve this problem it is possible to configure arbitrary number of additional 
custom LDAP attribute searches. Results of those searches will be added to the regular user's attributes. Let's consider
an example where user is member of several groups, each group has its +gidNumber+ attribute set and we want to have
a +gidNumber+ attribute assigned to user in Unity. The following snippet should be added to configuration:

----
ldap.additionalSearch.1.baseName=dc=groups,dc=unity-example,dc=com
ldap.additionalSearch.1.filter=(memberUid={USERNAME})
ldap.additionalSearch.1.selectedAttributes=gidNumber
----

In the above example it is assumed that all groups are found under the +dc=groups,dc=unity-example,dc=com+ node and
each group has its members listed with the +memberUid+ attribute. Of course the filter expression 
may be arbitrary complex.




The complete LDAP options reference follows:

include::ref-ldapProperties.txt[]

[[ldap-authenticator-cert]]
=== LDAP with certificate-based authentication

Credential verificator name:: +ldap-cert+
Compatible credentials:: +X.509 certificate+

The +ldap-cert+ verification mechanism shares the same features as the +ldap+ mechanism described above.
The only difference is that +ldap-cert+ can be used with certificates which were checked on the transport layer (TLS).
Naturally the password is not checked in this case (as user does not provide any password), and only the certificate's
subject is searched in LDAP and the attributes are assembled.

To use this verificator all the settings of the classic +ldap+ verificator can be used, however the following 
rules must be kept in mind:

. The +\{USERNAME\}+ variable (used in configuration) is substituted with a full subject name (DN) 
of the user's certificate.
. The LDAP configuration must use the  +ldap.bindAs=system+ setting with all the consequences (binding as user
is not possible without the password).
. In the +ldap.authenticateOnly=true+ mode it is only checked if the user is present in the LDAP database.
. The returned identity (as used in an input translation profile) is the LDAP distinguished name of the principal
not the DN of the certificate. The DN of the certificate is available as an attribute in the translation context.

 